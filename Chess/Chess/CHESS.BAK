#include<iostream.h>
#include<conio.h>
#include<fstream.h>
int c,i,j,k,l,x,f=0,t=2,y=0,d,e,m,n,qu=0,kf=0,cm=0;
char sa;
/*
i=initial row
j=initial column
k=final row
l=final column
x=free use
f=free flag
t=turn
y=turn completion flag
d=free use row
m=free use row 2
e=free use column
n=free use column 2
qu=queen condition
kf=king checking condition
cm=check mate contition
*/
int board[8][8];    //initialising chessboard
class chess
{
public:
void move()         //checking piece and executing accordingly
{
c=board[i][j]%10;
if(c==1)
r();
if(c==2)
h();
if(c==3)
b();
if(c==4)
ki();
if(c==5)
q();
if(c==6)
p();
}
void r();
void h();
void b();
void ki();
void q();
void p();
void disp();
};
void chess::r()      //Rook function
{
if(l==j)
{
if(i<k)
{
d=k;
e=i;
}
else if(i>k)
{
d=i;
e=k;
}
}
else if(i==k)
{
if(j<l)
{
d=l;
e=j;
}
else if(j<l)
{
d=j;
e=l;
}
}
else f=1;
if(f==0 && t==board[i][j]/10)
{
if(board[k][l]/10!=t)
{
if(i!=k)
{
for(x=d-1;x>e;x--)
{
if(board[x][j]!=0)
f=1;
}
}
else if(j!=l)
{
for(x=d-1;x>e;x--)
{
if(board[i][x]!=0)
f=1;
}
}
}
if(f==0)
{
y=0;
if(kf==0)
{
board[k][l]=board[i][j];
board[i][j]=0;
}
}
}
}
void chess::h()         //Horse function
{
if(t==board[i][j]/10)
{
d=i-k;
e=j-l;
if(((d==2||d==-2) && (e==1||e==-1))||((d==1||d==-1) && (e==2||e==-2)))
{
y=0;
if(kf==0)
{
board[k][l]=board[i][j];
board[i][j]=0;
}
}
}
}
void chess::p()        //Pawn function
{
if(board[i][j]/10==t)
{
if(l==j && board[k][l]==0)
{
if(t==1)
{
if(k==i+1)
{
y=0;
if(kf==0)
{
board[k][l]=16;
board[i][j]=0;
}
}
}
if(t==2)
{
if(k==i-1)
{
y=0;
if(kf==0)
{
board[k][l]=26;
board[i][j]=0;
}
}
}
}
else if(j==l+1 || j==l-1)
{
if(board[k][l]!=0)
{
if(t==1 && i==k-1)
{
y=0;
if(kf==0)
{
board[k][l]=16;
board[i][j]=0;
}
}
else if(t==2 && i==k+1)
{
y=0;
if(kf==0)
{
board[k][l]=26;
board[i][j]=0;
}
}
}
}
}
if(y==0 && kf==0)
{
if((t==1 && k==7)||(t==2 && k==0))          //Pawn promotion
{
d=t*10;
cout<<"\nEnter the piece you wish to covert your pawn to:\n";
cout<<"1. Rook\n2. Horse\n3. Bishop\n4. Queen\n5.Pawn\n";
cin>>x;
if(x==1)
board[k][l]=d+1;
else if(x==2)
board[k][l]=d+2;
else if(x==3)
board[k][l]=d+3;
else if(x==4)
board[k][l]=d+5;
}
}
}
void chess::b()             //Bishop function
{
if(t==board[i][j]/10)
{
y=0;
if((k-i)==(l-j) || (k-i)==(j-l))
{
if(k>i && l>j)
for(d=i,e=j;d<k;d++,e++)
{
if(d!=i && e!=j && board[d][e]!=0)
y=1;
}
else if(k>i && l<j)
for(d=i,e=j;d>k;d++,e--)
{
if(d!=i && e!=j && board[d][e]!=0)
y=1;
}
else if(k<i && l<j)
for(d=i,e=j;d>k;d--,e--)
{
if(d!=i && e!=j && board[d][e]!=0)
y=1;
}
else if(k<i && l>j)
for(d=i,e=j;d>k;d--,e++)
{
if(d!=i && e!=j && board[d][e]!=0)
y=1;
}
}
else y=1;
}
else y=1;
if(y==0 && kf==0)
{
board[k][l]=board[i][j];
board[i][j]=0;
}
}
void chess::q()         //Queen function
{
qu=1;
r();
if(y!=0)
{
b();
}
qu=0;
}
void chess::ki()         //King function
{
cm=0;
if((i-k)==1 || (k-i)==1 || (j-l)==1 || (l-j)==1)
{
m=i;n=j;
kf=1;
qu=1;
t=t%2;
t++;
for(i=0;i<8;i++)
{
for(j=0;j<8;j++)
{
y=1;
f=0;
if(board[i][j]/10==t && board[i][j]%10!=4)
{
move();
if(y==0)
cm++;
}
}
}
y=1;
if(cm==0)
{
y=0;
board[k][l]=board[m][n];
board[m][n]=0;
}
}
cm=1;
kf=0;
qu=0;
t=t%2;
t++;
}
void chess::disp()             //Function to display board
{
cout<<"| > |  | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 |\n";
cout<<"+---+  +---+---+---+---+---+---+---+---+\n";
cout<<"+---+  +---+---+---+---+---+---+---+---+\n";
for(j=0;j<8;j++)
{
cout<<"| "<<j+1<<" |  | ";
for(i=0;i<8;i++)
{
if(board[i][j]==0)
cout<<" ";
if(board[i][j]==11)
cout<<"R";
if(board[i][j]==21)
cout<<"r";
if(board[i][j]==12)
cout<<"H";
if(board[i][j]==22)
cout<<"h";
if(board[i][j]==13)
cout<<"B";
if(board[i][j]==23)
cout<<"b";
if(board[i][j]==14)
cout<<"K";
if(board[i][j]==24)
cout<<"k";
if(board[i][j]==15)
cout<<"Q";
if(board[i][j]==25)
cout<<"q";
if(board[i][j]==16)
cout<<"P";
if(board[i][j]==26)
cout<<"p";
cout<<" | ";
}
cout<<"\n+---+  +---+---+---+---+---+---+---+---+\n";
}
}
void main()           //Main function
{
clrscr();
cout<<"\n\n----------------------------------------------------\n                    CHESS 2P\n----------------------------------------------------\n";
getch();
fstream nb,load, save;
nb.open("newboard.dat",ios::in);        //Initialising board
for(i=0;i<8;i++)
{
for(j=0;j<8;j++)
{
nb>>board[i][j];
}
}
nb.close();
cout<<"                 1) NEW GAME\n";
load.open("chesssav.dat",ios::in);
load>>sa;
if(sa=='y')
{
cout<<"                 2) LOAD GAME\n";
cin>>sa;
if(sa=='2')                //Loading saved game
{
for(i=0;i<8;i++)
{
for(j=0;j<8;j++)
{
load>>board[i][j];
}
}
load>>t;
t=t%2;
t++;
}
}
load.close();
chess ch;
int z=0;
if(sa!='1' && sa!='2')
z++;
clrscr();
cout<<"\n\n INSTRUCTIONS:\n 1. Standard rules of chess apply\n 2. Enter '9' to exit\n\n                   ENJOY!\n";
getch();
clrscr();
while(z==0)              //Beginnig loop
{
qu=0;
if(y==0)                 //Changing turn
{
t=t%2;
t++;
}
cm=0;
for(k=0;k<8;k++)         //Checking for checkmate
for(l=0;l<8;l++)
if(board[k][l]/10==t && board[k][l]%10==4)
cm++;
if(cm==0)
z=1;
else
{
cout<<"Player "<<t<<":\n";
y=1;
f=0;
ch.disp();
cout<<"Enter the coordinates of the piece to be moved\n\t->";    //Recieving move
cin>>i;
cout<<"\t->";
if(i<9)
cin>>j;
i--;j--;
if(i<8 && j<8)
{
if(board[i][j]/10==t)
{
cout<<"Enter the coordinates to be moved to\n\t->";
cin>>k;
cout<<"\t->";
cin>>l;
k--;l--;
if(k<8 && l<8)
{
if(board[k][l]/10!=t)
{
ch.move();               //Moving piece
}
if(y==1)
{
cout<<"Invalid move";
getch();
}
}
}
}
else if(i>7)
z=1;
clrscr();
}
}
clrscr();
if(cm==0)
cout<<"\n\n\n                  CHECK MATE!\n                  Player "<<t<<" wins!";
else
{
cout<<"\n\n\n                  SAVE GAME? (y/n)\n\n\t->";
cin>>sa;
if(sa=='y')
{
save.open("chesssav.dat",ios::out);           //Saving game
save<<"y\n";
for(i=0;i<8;i++)
{
for(j=0;j<8;j++)
{
save<<board[i][j]<<"\t";
}
}
save<<t<<"\t";
save.close();
}
cout<<"\n\n\n                  GAME OVER";
}
getch();
}